<?php

define('DIR_EXCEL', 'excel');
define('TEMPLET_EXCEL', 'template_excel.xlsx');

module_load_include('list.inc', 'entity_entity', 'includes/eleve/eleve');
module_load_include('php', 'wrappers_custom', 'includes/eleve/EleveEleveWrapper');
module_load_include('php', 'wrappers_custom', 'includes/taxonomy_term/RedoublementTaxonomyTermWrapper');
module_load_include('php', 'wrappers_custom', 'includes/taxonomy_term/ClasseTaxonomyTermWrapper');
module_load_include('php', 'wrappers_custom', 'includes/taxonomy_term/NiveauTaxonomyTermWrapper');
module_load_include('inc', 'entity_entity', 'includes/relation/eleveTaompianarana');

/**
 * hook_menu
 */
function import_export_menu() {
    
    $items['ecoles/eleve/import-export'] =array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('import_export_form'),
        'access callback' => 'import_export_access',
    );
    
    $items['ecoles/eleve/import-xlsx'] =array(
        'access callback' => 'import_export_access',
        'page callback' => 'import_from_xlsx',
        'type' => MENU_NORMAL_ITEM,
    );
    
    $items['ecoles/eleve/export'] =array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('export_to_excel'),
        'access callback' => 'import_export_access',
    );
    
    return $items;
}

function import_export_access() {
    
    global $user;
    
    foreach (variable_get('IMPORT_EXPORT_ACCESS') as $key => $value) {

        if(user_has_role($key,$user) || user_has_role(variable_get('ADMIN_UID',2),$user)){
            return TRUE;
        }
    }
    return FALSE;
}


function import_export_form($form, &$form_state) {
    
    
    $markup = '<div class="message_inscrit_no">';
    $markup .= t("<p>Cet élève n'est pas encore inscrit dans notre écoles pour cet année scolaire</p>");
    $markup .= '</div>';

    $form['import_export']['import'] = array(
        '#type' => 'markup',
        '#markup' => $markup,
    );
}


function import_from_xlsx(){

  $form = drupal_get_form('import_from_xlsx_form');

  $output = drupal_render($form);

  return $output;
}

/**
 * The form
 * @return multitype:string multitype:string  multitype:string NULL
 */
function import_from_xlsx_form() {
    $form['#attributes'] = array(
        'enctype' => 'multipart/form-data'
    );

    $form['import'] = array(
        '#type' => 'fieldset',
        '#title' => t('Import fichier excel (xlsx)'),
    );
    
    $markup  = t('<p>Pour importer un fichier excel veullez assurer que les colones suivant sont existe et ordre :</p>');
    $markup .= t('<p> Numero matricule, Nom, Prénom, Sexe, Date de naissance, Lieu de Naissance,'
            . 'Adresse, Numero Telephone, Nom du père, Fonction Père, Nom Mère, Fonction Mère, Nom Tuteur, Fonction Tuteur, Num Tel Tuteur, Adresse Tuteur, Niveau, Classe, Redoublement');
    $markup .= t('<p>Pour le <b> sexe </b>: <ul> <li> 1 => Homme </li> <li> 2 => Femme </li></ul></p>');
    $markup .= t('<p>Pour le <b> niveau </b> veuillez voir dans la '. l('list niveau','ecoles/utile/list/niveau'). ' et utilisez le code pour l\'import excel ou csv </p>');
    $markup .= t('<p>Pour la <b> Classe </b> veuillez voir dans la '. l('list classe','ecoles/utile/list/classe'). ' et utilisez le code pour l\'import excel ou csv </p>');
    $markup .= t('<p>Pour le <b> Redoublement </b>: <ul> <li> P => Passant </li> <li> R => Redoublant </li> <li> T => Triplant </li></ul></p>');


    $form['import']['description'] = array(
        '#type' => 'markup',
        '#markup' => $markup,
    );

    $form['import']['xlsxfile'] = array(
        '#title' => t('Fichier excel'),
        '#type' => 'file',
        '#description' => ($max_size = parse_size(ini_get('upload_max_filesize'))) ? t('Due to server restrictions, the <strong>maximum upload file size is !max_size</strong>. Files that exceed this size will be disregarded.', array('!max_size' => format_size($max_size))) : '',
    );

    $form['import']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Importer ce fichier'),
    );

    $form['#validate'] = array(
        'import_from_xlsx_validate_fileupload',
        'import_from_xlsx_form_validate',
    );
    
    return $form;
}

function import_from_xlsx_validate_fileupload($form, &$form_state) {

    $validators = array(
        'file_validate_extensions' => array('xlsx'),
    );

    if ($file = file_save_upload('xlsxfile', $validators, "public://", FILE_EXISTS_REPLACE)) {
        $form_state['values']['xlsxfile'] = $file->destination;
    } else {
        form_set_error('xlsxImporter', t('Unable to copy upload file'));
    }
}

function import_from_xlsx_form_validate(&$form, &$form_state) {

    if (isset($form_state['values']['xlsxfile']) && $form_state['values']['xlsxfile'] != NULL) {

        module_load_include('class.php', 'import_export', 'simplexlsx');

        $xlsx = new SimpleXLSX( $form_state['values']['xlsxfile'] );


        foreach( $xlsx->rowsEleve() as $line ) {

            if (count($line) != 19) {
                form_set_error('xlsxfile', t('This file has the incorrect number of columns. Expecting 19'));
            }
            break;
        }
    }
}

function import_from_xlsx_form_submit($form, &$form_state) {

    $batch = array(
        'title' => t('Importing CSV ...'),
        'operations' => array(),
        'init_message' => t('Commencing'),
        'progress_message' => t('Processed @current out of @total.'),
        'error_message' => t('An error occurred during processing'),
        'finished' => 'import_from_xlsx_import_finished',
    );

    if (isset($form_state['values']['xlsxfile']) && $form_state['values']['xlsxfile'] != NULL) {

        $filename = $form_state['values']['xlsxfile'];

        module_load_include('class.php', 'import_export', 'simplexlsx');

        $xlsx = new SimpleXLSX( $filename );

        foreach( $xlsx->rowsEleve() as $line ) {

            $batch['operations'][] = array('import_from_xlsx_import_line', array($line));
        }
        
        $batch['operations'][] = array('import_export_unlink_file', array($filename));

    }

    batch_set($batch);
}

function import_from_xlsx_import_line($line, &$context) {

    $num_mat    = trim($line[0]);
    $nom        = trim($line[1]);
    $prenom     = trim($line[2]);
    $sex        = trim($line[3]);
    $date_naiss = strtoupper(trim($line[4]));
    $lieu       = strtoupper(trim($line[5]));
    $adress     = strtoupper(trim($line[6]));
    $num_tel    = trim($line[7]);
    $nom_pere   = trim($line[8]);
    $func_pere  = trim($line[9]);
    $nom_mere   = trim($line[10]);
    $funct_mere = trim($line[11]);
    $nom_tuteur     = trim($line[12]);
    $funct_tuteur   = trim($line[13]);
    $num_tel_tuteur = trim($line[14]);
    $adress_tuteur  = trim($line[15]);
    $niveau         = trim($line[16]);
    $classe         = trim($line[17]);
    $redoublement   = trim($line[18]);

    
    $niveau_tid = NiveauTaxonomyTermWrapper::getNiveauByCode($niveau);
    $classe_tid = ClasseTaxonomyTermWrapper::getClasseByCode($classe);
    $redouble_tid = RedoublementTaxonomyTermWrapper::getByCode($redoublement);
    
    if (is_numeric($num_mat) && strtotime($date_naiss) > 0 && in_array($sex, array(1, 2)) ) {

        $sex = $sex == 1 ? 8 : 9;

        try{
            
            $error_message = array();

            $eleve_id = EleveEleveWrapper::addEleve($num_mat, $nom, $prenom, $sex, $date_naiss, $lieu, $adress, $num_tel, $nom_pere, $func_pere, $nom_mere, $funct_mere, $nom_tuteur ,$funct_tuteur,$num_tel_tuteur,$adress_tuteur,$error_message);

            if ($eleve_id != NULL && $niveau_tid != NULL) {

                $taompianarana_tid = variable_get('TAOMPIANARANA');

                $saved = _insertIntoEleveTaompianarana($eleve_id, $taompianarana_tid, $niveau_tid,$redouble_tid,$classe_tid);

                if ($saved != NULL) {
                    drupal_set_message(t('Enregistrement reussi'));
                } else {
                    $db_transaction->rollback();
                    drupal_set_message(t('Enregistrement echoé. Num mat : '.$num_mat), 'error');
                }
            }elseif($niveau_tid == NULL) {
                drupal_set_message(t('Enregistrement reussi mais pas de niveau. Num mat : '.$num_mat), 'error');
            }

            foreach ($error_message as $value) {
                drupal_set_message($value, 'error');
            }
            
        }catch (Exception $e){
            $db_transaction->rollback();
            drupal_set_message(t('Enregistrement echoé. Num mat : '.$num_mat), 'error');
        }
    } else {
        drupal_set_message(t('Ligne erroné.Num Mat : '.$num_mat), 'error');
    }
}

function import_from_xlsx_import_finished() {
    drupal_set_message('Finish');
}


function export_to_excel($form, &$form_state) {
    
    $form['export'] = array(
        '#type' => 'fieldset',
        '#title'=> t('Export vers un fichier excel'),
    );
    
    
    $options_niveau = _get_taxonomy_term('niveau');
    
    $options_niveau[NULL] = t('--- none ---');
    
    $form['export']['eleve_niveau'] = array(
        '#type' => 'select',
        '#title' => t('Niveau'),
        '#options' => $options_niveau,
        '#prefix'   =>'<div class = "copyright">',
        '#suffix'   => '</div>',
        '#attributes' => array('class' => array('sexe_select')),
    );
    
    $options_class = _get_taxonomy_term('classe');
    
    $options_class[NULL] = t('--- none ---');
    
    $form['export']['eleve_class'] = array(
        '#type' => 'select',
        '#title' => t('Classe'),
        '#options' => $options_class,
        '#prefix'   =>'<div class = "copyright">',
        '#suffix'   => '</div>',
        '#attributes' => array('class' => array('sexe_select')),
    );
    
    $form['export']['submit'] = array(
        '#type'     => 'submit',
        '#value'    => t('Exporter vers un fichier excel'),
        '#prefix'   =>'<div class = "submit-filter">',
        '#suffix'   => '</div>',
    );
    
    if(isset($form_state['excel']) && $form_state['excel'] != NULL){
        
        $link = l(t('Telecharger ici votre excel') , $form_state['excel']);
        
        $form['export']['link'] = array(
            '#type'     => 'markup',
            '#markup'   => $link,
            '#prefix'   =>'<div class = "submit-filter">',
            '#suffix'   => '</div>',
        );
    }
    
    return $form;
}

function export_to_excel_submit($form, &$form_state) {
    
    $eleve_niveau   = $form_state['values']['eleve_niveau'];
    $eleve_class    = $form_state['values']['eleve_class'];
    
    if($eleve_niveau != NULL && $eleve_class != NULL){
        drupal_set_message(t('Veullier choisisser un seulement entre niveau et classe'), 'error');
        return ;
    }
    
    if($eleve_niveau == NULL && $eleve_class == NULL){
        drupal_set_message(t('Veullier choisisser un seulement entre niveau et classe'), 'error');
        return ;
    }
    
    if($eleve_niveau != NULL){
        
        $header             = array(t('NUM_MAT') ,t('NOM') ,t('PRENOM') ,t('SEXE') ,t('DATE DE NAISSANCE') ,t('NIVEAU'));
        $niveau             = new NiveauTaxonomyTermWrapper($eleve_niveau);
        $excel_name         = t('Liste_eleves_'.$niveau->getName().'_'.date('d_M_Y'));
        $key_not_to_excel   = array('ID','TAOMPIANARANA_TID','SEXE_TID','NIVEAU_TID','TAOMPIANARANA_NAME');
        $rows               = _eleve_list_get_eleve_by_niveau($eleve_niveau);
        
        $form_state['excel']= _export_list_eleve_to_excel_rows($excel_name ,$header ,$rows,$key_not_to_excel);
    }
    if($eleve_class != NULL){
        
        $header             = array(t('NUM_MAT') ,t('NOM') ,t('PRENOM') ,t('SEXE') ,t('DATE DE NAISSANCE') ,t('NIVEAU'),t('CLASSE'));
        $classe             = new ClasseTaxonomyTermWrapper($eleve_class);
        $excel_name         = t('Liste_eleves_'.$classe->getName().'_'.date('d_M_Y'));
        $key_not_to_excel   = array('ID','TAOMPIANARANA_TID','SEXE_TID','NIVEAU_TID','TAOMPIANARANA_NAME','CLASS_TID');
        $rows               = _eleve_list_get_list($niveau_tid = NULL, $eleve_class);
        
        $form_state['excel']= _export_list_eleve_to_excel_rows($excel_name ,$header ,$rows,$key_not_to_excel);
        
    }
    
    $form_state['rebuild'] = 1;
}



function _export_list_eleve_to_excel_rows($excel_name, $header, $rows,$key_not_to_excel = array()) {
    
    if ($excel_name != NULL && !empty($header) && !empty($rows)) {

        require_once 'sites/all/libraries/PHPExcel/Classes/PHPExcel.php';
        require_once 'sites/all/libraries/PHPExcel/Classes/PHPExcel/IOFactory.php';

        try {
            
            module_load_include('inc', 'phpexcel');

            $dir        = file_stream_wrapper_get_instance_by_uri(_PUBLIC.DIR_EXCEL)->realpath();
            $path       = $dir . '/' . $excel_name . '.xlsx';
            $fileURI    = PUBLIC_FILE .'/'. DIR_EXCEL . '/' . $excel_name . '.xlsx';
            $template   = _PUBLIC . DIR_EXCEL . '/' .TEMPLET_EXCEL;
            
            $template_real_path = file_stream_wrapper_get_instance_by_uri($template)->realpath();

            $objPHPExcel = PHPExcel_IOFactory::load($template_real_path);

            $objPHPExcel->getProperties()->setCreator("Ecoles")
                    ->setLastModifiedBy("Ecoles")
                    ->setTitle($excel_name)
                    ->setSubject($excel_name)
                    ->setDescription("")
                    ->setKeywords($excel_name)
                    ->setCategory("");
            
            $activeSheetIndex = 0;

            $objPHPExcel->createSheet($activeSheetIndex);
            $objPHPExcel->setActiveSheetIndex($activeSheetIndex);
            $objPHPExcel->getActiveSheet()->setTitle('Liste des élèves');

            $cellStyle = array(
                'borders' => array(
                    'allborders' => array(
                        'style' => PHPExcel_Style_Border::BORDER_THIN,
                        'color' => array('rgb' => '000000'),
                    ),
                ),
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                    'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                ),
            );

            $noBorderStyle = array(
                'borders' => array(
                    'allborders' => array(
                        'style' => PHPExcel_Style_Border::BORDER_NONE,
                    ),
                ),
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                    'vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                ),
                'font' => array(
                    'bold' => TRUE,
                    'size' => 18,
                ),
            );

            //***** Mametraka ny Header ***//
            $colIndex = 0;
            $rowIndex = 1;
            foreach ($header as $colValue) {
                
                $objPHPExcel->setActiveSheetIndex($activeSheetIndex)->setCellValueByColumnAndRow($colIndex, $rowIndex, $colValue);
                //--Manova ny border sy border color --//
                $objPHPExcel->getActiveSheet()->getStyleByColumnAndRow($colIndex, $rowIndex)->applyFromArray($cellStyle);
                $colIndex++;
            }

            ++$rowIndex;

            foreach ($rows as $row) {
                
                $colIndex = 0;
                
                // aty vo sivanina ilay row
                foreach ($row as $key => $value) {
                    
                    if(count($key_not_to_excel) > 0 && in_array($key, $key_not_to_excel)){
                        continue;
                    }
                    
                    //--Manova ny border sy border color --//
                    $objPHPExcel->getActiveSheet()->getStyleByColumnAndRow($colIndex, $rowIndex)->applyFromArray($cellStyle);
                    $objPHPExcel->setActiveSheetIndex($activeSheetIndex)->setCellValueByColumnAndRow($colIndex, $rowIndex, $value);
                    $colIndex++;
                }

                $rowIndex++;
            }
             
            $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $objWriter->save($path);

            return $fileURI;
            
        } catch (Exception $e) {
            drupal_set_message(t('Erreur de creation excel :@error', array('@error' => $e->getMessage())), 'error');
        }
    }
    return NULL;
}

function import_export_unlink_file($file , &$context) {
    
    if (file_exists($destination_file)) {
        unlink($destination_file);
    }
}