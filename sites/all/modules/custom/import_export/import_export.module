<?php

define('DIR_EXCEL', 'excel');
define('TEMPLET_EXCEL', 'template_excel.xlsx');
define('DIR_PDF_BULLETIN', 'export_pdf/bulletin');
define('DIR_PERIOD_BULLETIN', 'period_');
define('DIR_CLASS_BULLETIN', 'class_');

module_load_include('list.inc', 'entity_entity', 'includes/eleve/eleve');
module_load_include('php', 'wrappers_custom', 'includes/eleve/EleveEleveWrapper');
module_load_include('inc', 'entity_entity', 'includes/relation/classMatieres');
module_load_include('inc', 'entity_entity', 'tools/upload_photo');
module_load_include('inc', 'entity_entity', 'includes/note/note_calcul');
module_load_include('php', 'wrappers_custom', 'includes/taxonomy_term/RedoublementTaxonomyTermWrapper');
module_load_include('php', 'wrappers_custom', 'includes/taxonomy_term/ClasseTaxonomyTermWrapper');
module_load_include('php', 'wrappers_custom', 'includes/taxonomy_term/NiveauTaxonomyTermWrapper');
module_load_include('inc', 'entity_entity', 'includes/relation/eleveTaompianarana');

/**
 * hook_menu
 */
function import_export_menu() {
    
    $items['ecoles/eleve/import-export'] =array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('import_export_form'),
        'access callback' => 'import_export_access',
    );
    
    $items['ecoles/eleve/import-xlsx'] =array(
        'access callback' => 'import_export_access',
        'page callback' => 'import_from_xlsx',
    );
    
    $items['ecoles/eleve/export'] =array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('export_to_excel'),
        'access callback' => 'import_export_access',
    );
    
    $items['ecoles/note/export-template'] =array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('export_to_excel_template_note'),
        'access callback' => 'note_access',
    );
    
    $items['ecoles/note/import-xlsx'] =array(
        'access callback' => 'note_access',
        'page callback' => 'import_note_from_xlsx',
    );
    return $items;
}

function import_export_access() {
    
    global $user;
    
    foreach (variable_get('IMPORT_EXPORT_ACCESS') as $key => $value) {

        if(user_has_role($key,$user) || user_has_role(variable_get('ADMIN_UID',2),$user)){
            return TRUE;
        }
    }
    
    if(user_has_role(variable_get('ADMINISTRATOR_USER',2),$user)){
        return TRUE;
    }
    
    return FALSE;
}


function import_export_form($form, &$form_state) {
    
    
    $markup = '<div class="message_inscrit_no">';
    $markup .= t("<p></p>");
    $markup .= '</div>';

    $form['import_export']['import'] = array(
        '#type' => 'markup',
        '#markup' => $markup,
    );
    
    return $form;
}


function import_from_xlsx(){

    $form = drupal_get_form('import_from_xlsx_form');

    $output = drupal_render($form);

    return $output;
}

/**
 * The form
 * @return multitype:string multitype:string  multitype:string NULL
 */
function import_from_xlsx_form() {
    $form['#attributes'] = array(
        'enctype' => 'multipart/form-data'
    );

    $form['import'] = array(
        '#type' => 'fieldset',
        '#title' => t('Import fichier excel (xlsx)'),
    );
    
    $markup  = t('<p>Pour importer un fichier excel veullez assurer que les colones suivant sont existe et en ordre :</p>');
    $markup .= t('<p> Numero matricule, Nom, Prénom, Sexe, Date de naissance, Lieu de Naissance,'
            . 'Adresse, Numero Telephone, Nom du père, Fonction Père, Nom Mère, Fonction Mère, Adrees de parent, Nom Tuteur, Fonction Tuteur, Num Tel Tuteur, Adresse Tuteur, Niveau, Classe, Num en classe, Redoublement, Référence photo');
    $markup .= t('<p>Pour le <b> sexe </b>: <ul> <li> 1 => Homme </li> <li> 2 => Femme </li></ul></p>');
    $markup .= t('<p>Pour le <b> niveau </b> veuillez voir dans la '. l('list niveau','ecoles/utile/list/niveau'). ' et utilisez le code pour l\'import excel ou csv </p>');
    $markup .= t('<p>Pour la <b> Classe </b> veuillez voir dans la '. l('list classe','ecoles/utile/list/classe'). ' et utilisez le code pour l\'import excel ou csv </p>');
    $markup .= t('<p>Pour le <b> Redoublement </b>: <ul> <li> P => Passant </li> <li> R => Redoublant </li> <li> T => Triplant </li></ul></p>');
    $markup .= t('<p>Si le colone redoublement est vide alors l\'eleve est automatiquement <b><u>Passant</u></b></p>');


    $form['import']['description'] = array(
        '#type' => 'markup',
        '#markup' => $markup,
    );

    $form['import']['xlsxfile'] = array(
        '#title' => t('Fichier excel'),
        '#type' => 'file',
        '#description' => ($max_size = parse_size(ini_get('upload_max_filesize'))) ? t('Due to server restrictions, the <strong>maximum upload file size is !max_size</strong>. Files that exceed this size will be disregarded.', array('!max_size' => format_size($max_size))) : '',
    );

    $form['import']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Importer ce fichier'),
    );

    $form['#validate'] = array(
        'import_from_xlsx_validate_fileupload',
        'import_from_xlsx_form_validate',
    );
    
    return $form;
}

function import_from_xlsx_validate_fileupload($form, &$form_state) {

    $validators = array(
        'file_validate_extensions' => array('xlsx'),
    );

    if ($file = file_save_upload('xlsxfile', $validators, "public://", FILE_EXISTS_REPLACE)) {
        $form_state['values']['xlsxfile'] = $file->destination;
    } else {
        form_set_error('xlsxImporter', t('Unable to copy upload file'));
    }
}

function import_from_xlsx_form_validate(&$form, &$form_state) {

    if (isset($form_state['values']['xlsxfile']) && $form_state['values']['xlsxfile'] != NULL) {

        module_load_include('class.php', 'import_export', 'includes/simplexlsx');

        $xlsx = new SimpleXLSX( $form_state['values']['xlsxfile'] );


        foreach( $xlsx->rowsEleve() as $line ) {

            if (count($line) != 22) {
                form_set_error('xlsxfile', t('This file has the incorrect number of columns. Expecting 22'));
            }
            break;
        }
    }
}

function import_from_xlsx_form_submit($form, &$form_state) {

    $batch = array(
        'title' => t('Import excel ...'),
        'operations' => array(),
        'init_message' => t('Commencer'),
        'progress_message' => t('Prossession @current sur @total.'),
        'error_message' => t('An error occurred during processing'),
        'finished' => 'bathc_finish',
    );

    if (isset($form_state['values']['xlsxfile']) && $form_state['values']['xlsxfile'] != NULL) {

        $filename = $form_state['values']['xlsxfile'];

        module_load_include('class.php', 'import_export', 'includes/simplexlsx');

        $xlsx = new SimpleXLSX( $filename );

        $i = 1;
        foreach( $xlsx->rowsEleve() as $line ) {

            if($i == 1){
                $i++;
                continue;
            }
            
            $batch['operations'][] = array('import_from_xlsx_import_line', array($line));
        }
        
        $batch['operations'][] = array('import_export_unlink_file', array($filename));

    }

    batch_set($batch);
}

function import_from_xlsx_import_line($line, &$context) {

    $num_mat    = trim($line[0]);
    $nom        = trim($line[1]);
    $prenom     = trim($line[2]);
    $sex        = trim($line[3]);
    $date_naiss = trim($line[4]);
    $lieu       = trim($line[5]);
    $adress     = trim($line[6]);
    $num_tel    = trim($line[7]);
    $nom_pere   = trim($line[8]);
    $func_pere  = trim($line[9]);
    $nom_mere   = trim($line[10]);
    $funct_mere = trim($line[11]);
    $parent_adress  = trim($line[12]);
    $nom_tuteur     = trim($line[13]);
    $funct_tuteur   = trim($line[14]);
    $num_tel_tuteur = trim($line[15]);
    $adress_tuteur  = trim($line[16]);
    $niveau         = trim($line[17]);
    $classe         = trim($line[18]);
    $num_en_class   = trim($line[19]);
    $redoublement   = trim($line[20]);
    $photo          = trim($line[21]);

    // mila avadika ho en ny date miditra eo amin'ny birthdate
    $date_naiss   = _entity_entity_date_format_in_en($date_naiss);
    $niveau_tid   = NiveauTaxonomyTermWrapper::getNiveauByCode($niveau);
    $classe_tid   = ClasseTaxonomyTermWrapper::getClasseByCode($classe);
    $redouble_tid = RedoublementTaxonomyTermWrapper::getByCode($redoublement);
    // raha null ity dia ato par defaut passant
    if($redouble_tid == NULL){
        $redouble_tid = RedoublementTaxonomyTermWrapper::getByCode('P');
    }

    if (is_numeric($num_mat) && strtotime($date_naiss) > 0 && in_array($sex, array(1, 2)) ) {

        $db_transaction = db_transaction();
        
        $sex = $sex == 1 ? 8 : 9;

        try{

            $error_message = array();

            $eleve_id = EleveEleveWrapper::addEleve($num_mat, $nom, $prenom, $sex, $date_naiss, $lieu, $adress, $num_tel, $nom_pere, $func_pere, $nom_mere,$parent_adress, $funct_mere, $nom_tuteur ,$funct_tuteur,$num_tel_tuteur,$adress_tuteur,$error_message);
            
            // enregistrer-na eto indray ilay image raha misy 
            if ($photo != NULL) {
                $filePath = variable_get('PUBLIC_FILE', 'public://') . FILE_PHOTO;
                
                $source_file= variable_get('PUBLIC_FILE', 'public://') . FILE_PHOTO_TO_UPLOAD.'/'.$photo;
                
                if(is_file($source_file)){

                    $eleve = new EleveEleveWrapper($eleve_id);
                    $photo_name = $eleve->getId() . '_' . $eleve->getNumMat();

                    $dir = file_stream_wrapper_get_instance_by_uri($filePath)->realpath();
                    $destination_file = $dir . '/' . $photo_name;
                    $ext = NULL;
                    // miditra eto vao hazo ilay extension an'ilay sary
                    _upload_photo_compress_and_copy_image($source_file, $destination_file, $ext);

                    if ($ext != NULL) {

                        $eleve->setPhoto(array(PUBLIC_FILE . '/' . FILE_PHOTO . '/' . $photo_name . '.' . $ext));
                        $eleve->save();
                    }
                }
            }

            // tsy nasiako filtre != NULL ny class satria afaka miditra fona iny rehefa misy ny niveau
            if ($eleve_id != NULL && $niveau_tid != NULL) {

                $taompianarana_tid = variable_get('TAOMPIANARANA');

                $saved = _insertIntoEleveTaompianarana($eleve_id, $taompianarana_tid, $niveau_tid,$redouble_tid,$classe_tid,$num_en_class);

                if ($saved != NULL) {
                    drupal_set_message(t('Enregistrement reussi'));
                } else {
                    $db_transaction->rollback();
                    drupal_set_message(t('Enregistrement echoé. Num mat : '.$num_mat), 'error');
                }
                
            }elseif($niveau_tid == NULL) {
                
                drupal_set_message(t('Enregistrement reussi mais pas de niveau. Num mat : '.$num_mat), 'error');
            }

            foreach ($error_message as $value) {
                
                drupal_set_message($value, 'error');
            }
            
        }catch (Exception $e){
            
            $db_transaction->rollback();
            drupal_set_message(t('Enregistrement echoé. Num mat : '.$num_mat), 'error');
        }
    } else {
        
        drupal_set_message(t('Ligne erroné. Num Mat : '.$num_mat), 'error');
    }
}

function bathc_finish() {
    drupal_set_message('Finish');
}


function export_to_excel($form, &$form_state) {
    
    $form['export'] = array(
        '#type' => 'fieldset',
        '#title'=> t('Export vers un fichier excel'),
    );
    
    $markup = t('Cette page permet d\'exporter la liste des élèves par classe ou par niveau selon vos filtre ci-desous');
    $form['export']['markup'] = array(
        '#type' => 'markup',
        '#markup'=> $markup,
        '#prefix'   =>'<div class = "eleve_list">',
        '#suffix'   => '</div>',
    );
    
    $options_niveau = _get_taxonomy_term('niveau');
    
    $options_niveau[NULL] = t('--- none ---');
    
    $form['export']['eleve_niveau'] = array(
        '#type' => 'select',
        '#title' => t('Niveau'),
        '#options' => $options_niveau,
        '#prefix'   =>'<div class = "copyright">',
        '#suffix'   => '</div>',
        '#attributes' => array('class' => array('sexe_select')),
    );
    
    $options_class = _get_taxonomy_term('classe');
    
    $options_class[NULL] = t('--- none ---');
    
    $form['export']['eleve_class'] = array(
        '#type' => 'select',
        '#title' => t('Classe'),
        '#options' => $options_class,
        '#prefix'   =>'<div class = "copyright">',
        '#suffix'   => '</div>',
        '#attributes' => array('class' => array('sexe_select')),
    );
    
    $form['export']['submit'] = array(
        '#type'     => 'submit',
        '#value'    => t('Exporter vers un fichier excel'),
        '#prefix'   =>'<div class = "submit-filter">',
        '#suffix'   => '</div>',
    );
    
    if(isset($form_state['excel']) && $form_state['excel'] != NULL){
        
        $link = l(t('Telecharger ici votre excel') , $form_state['excel']);
        
        $form['export']['link'] = array(
            '#type'     => 'markup',
            '#markup'   => $link,
            '#prefix'   =>'<div class = "submit-filter">',
            '#suffix'   => '</div>',
        );
    }
    
    return $form;
}

function export_to_excel_submit($form, &$form_state) {
    
    $eleve_niveau   = $form_state['values']['eleve_niveau'];
    $eleve_class    = $form_state['values']['eleve_class'];
    
    if($eleve_niveau != NULL && $eleve_class != NULL){
        drupal_set_message(t('Veullier choisisser un seulement entre niveau et classe'), 'error');
        return ;
    }
    
    if($eleve_niveau == NULL && $eleve_class == NULL){
        drupal_set_message(t('Veullier choisisser un seulement entre niveau et classe'), 'error');
        return ;
    }
    
    if($eleve_niveau != NULL){
        
        $header             = array(t('NUM_MAT') ,t('NOM') ,t('PRENOM') ,t('SEXE') ,t('DATE DE NAISSANCE') ,t('NIVEAU'));
        $niveau             = new NiveauTaxonomyTermWrapper($eleve_niveau);
        $excel_name         = t('Liste_eleves_'.$niveau->getName().'_'.date('d_M_Y'));
        $key_not_to_excel   = array('ID','TAOMPIANARANA_TID','SEXE_TID','NIVEAU_TID','TAOMPIANARANA_NAME','NUM_CLASS','TABLE_ID');
        $rows               = _eleve_list_get_eleve_by_niveau($eleve_niveau);
        
        $form_state['excel']= _export_list_eleve_to_excel_rows($excel_name ,$header ,$rows,$key_not_to_excel);
    }
    if($eleve_class != NULL){
        
        $header             = array(t('NUM_MAT') ,t('NOM') ,t('PRENOM') ,t('SEXE') ,t('DATE DE NAISSANCE') ,t('NIVEAU'),t('CLASSE'));
        $classe             = new ClasseTaxonomyTermWrapper($eleve_class);
        $excel_name         = t('Liste_eleves_'.$classe->getName().'_'.date('d_M_Y'));
        $key_not_to_excel   = array('ID','TAOMPIANARANA_TID','SEXE_TID','NIVEAU_TID','TAOMPIANARANA_NAME','CLASS_TID','NUM_CLASS','TABLE_ID');
        $rows               = _eleve_list_get_list($niveau_tid = NULL, $eleve_class);
        
        $form_state['excel']= _export_list_eleve_to_excel_rows($excel_name ,$header ,$rows,$key_not_to_excel);
        
    }
    
    $form_state['rebuild'] = 1;
}



function _export_list_eleve_to_excel_rows($excel_name, $header, $rows,$key_not_to_excel = array()) {
    
    if ($excel_name != NULL && !empty($header) && !empty($rows)) {

        require_once 'sites/all/libraries/PHPExcel/Classes/PHPExcel.php';
        require_once 'sites/all/libraries/PHPExcel/Classes/PHPExcel/IOFactory.php';

        try {
            
            module_load_include('inc', 'phpexcel');

            $dir        = file_stream_wrapper_get_instance_by_uri(_PUBLIC.DIR_EXCEL)->realpath();
            $path       = $dir . '/' . $excel_name . '.xlsx';
            $fileURI    = PUBLIC_FILE .'/'. DIR_EXCEL . '/' . $excel_name . '.xlsx';
            $template   = _PUBLIC . DIR_EXCEL . '/' .TEMPLET_EXCEL;
            
            $template_real_path = file_stream_wrapper_get_instance_by_uri($template)->realpath();

            $objPHPExcel = PHPExcel_IOFactory::load($template_real_path);

            $objPHPExcel->getProperties()->setCreator("Ecoles")
                    ->setLastModifiedBy("Ecoles")
                    ->setTitle($excel_name)
                    ->setSubject($excel_name)
                    ->setDescription("")
                    ->setKeywords($excel_name)
                    ->setCategory("");
            
            $activeSheetIndex = 0;

            $objPHPExcel->createSheet($activeSheetIndex);
            $objPHPExcel->setActiveSheetIndex($activeSheetIndex);
            $objPHPExcel->getActiveSheet()->setTitle('Liste des élèves');

            $cellStyle = array(
                'borders' => array(
                    'allborders' => array(
                        'style'  => PHPExcel_Style_Border::BORDER_THIN,
                        'color'  => array('rgb' => '000000'),
                    ),
                ),
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                    'vertical'   => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                ),
            );

            $noBorderStyle = array(
                'borders' => array(
                    'allborders' => array(
                        'style'  => PHPExcel_Style_Border::BORDER_NONE,
                    ),
                ),
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                    'vertical'   => PHPExcel_Style_Alignment::VERTICAL_CENTER,
                ),
                'font' => array(
                    'bold' => TRUE,
                    'size' => 18,
                ),
            );

            //***** Mametraka ny Header ***//
            $colIndex = 0;
            $rowIndex = 1;
            foreach ($header as $colValue) {
                
                $objPHPExcel->setActiveSheetIndex($activeSheetIndex)->setCellValueByColumnAndRow($colIndex, $rowIndex, $colValue);
                //--Manova ny border sy border color --//
                $objPHPExcel->getActiveSheet()->getStyleByColumnAndRow($colIndex, $rowIndex)->applyFromArray($cellStyle);
                $colIndex++;
            }

            $rowIndex++;

            foreach ($rows as $row) {
                
                $colIndex = 0;
                
                // aty vo sivanina ilay row
                foreach ($row as $key => $value) {
                    
                    if(count($key_not_to_excel) > 0 && in_array($key, $key_not_to_excel)){
                        continue;
                    }
                    
                    //--Manova ny border sy border color --//
                    $objPHPExcel->getActiveSheet()->getStyleByColumnAndRow($colIndex, $rowIndex)->applyFromArray($cellStyle);
                    $objPHPExcel->setActiveSheetIndex($activeSheetIndex)->setCellValueByColumnAndRow($colIndex, $rowIndex, $value);
                    $colIndex++;
                }

                $rowIndex++;
            }
             
            $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $objWriter->save($path);

            return $fileURI;
            
        } catch (Exception $e) {
            drupal_set_message(t('Erreur de creation excel :@error', array('@error' => $e->getMessage())), 'error');
        }
    }
    return NULL;
}

function import_export_unlink_file($file , &$context) {
    
    if (file_exists($destination_file)) {
        unlink($destination_file);
    }
}

function export_to_excel_template_note($form, &$form_state) {
    
    $form['export'] = array(
        '#type' => 'fieldset',
        '#title'=> t('Export un template de note'),
    );

    $markup = t('Cette page permet d\'exporter la liste des élèves par classe pour faire l\'import de note par matière');
    $form['export']['markup'] = array(
        '#type' => 'markup',
        '#markup'=> $markup,
        '#prefix'   =>'<div class = "eleve_list">',
        '#suffix'   => '</div>',
    );

    $options_class = _get_taxonomy_term('classe');

    $options_class[NULL] = t('--- none ---');

    $form['export']['eleve_class'] = array(
        '#type' => 'select',
        '#title' => t('Classe'),
        '#options' => $options_class,
        '#prefix'   =>'<div class = "copyright">',
        '#suffix'   => '</div>',
        '#attributes' => array('class' => array('sexe_select')),
    );

    $form['export']['submit'] = array(
        '#type'     => 'submit',
        '#value'    => t('Exporter vers un fichier excel'),
        '#prefix'   =>'<div class = "submit-filter">',
        '#suffix'   => '</div>',
    );

    if(isset($form_state['excel']) && $form_state['excel'] != NULL){

        $link = l(t('Telecharger ici votre excel') , $form_state['excel']);

        $form['export']['link'] = array(
            '#type'     => 'markup',
            '#markup'   => $link,
            '#prefix'   =>'<div class = "submit-filter">',
            '#suffix'   => '</div>',
        );
    }
        
    return $form;
}


function export_to_excel_template_note_submit($form, &$form_state) {
    
    global $user;
    $eleve_class    = $form_state['values']['eleve_class'];
    
    if($eleve_class == NULL){
        drupal_set_message(t('Veullier choisisser un seulement entre niveau et classe'), 'error');
        return ;
    }
    
    if($eleve_class != NULL){

        $header = array();
        
        if(user_has_role(variable_get('ADMINISTRATOR_USER',2),$user) || user_has_role(variable_get('CONFIGURATION'),$user)){

            $header         = array(t('NUM_MAT') ,t('NOM') ,t('PRENOM') ,t('SEXE') ,t('DATE DE NAISSANCE'));
            $conditions = array(
                array(
                    'field_name' => 'taompianarana_tid',
                    'operator' => '=',
                    'value' => variable_get('TAOMPIANARANA'),
                ),
                array(
                    'field_name' => 'classe_tid',
                    'operator' => '=',
                    'value' => $eleve_class,
                ),
            );

            $result_matiere = _selectFromClassMatieres($conditions);

            while ($record_matiere = $result_matiere->fetchAssoc()) {
                
                $matiere = new MatieresTaxonomyTermWrapper($record_matiere['matiere_tid']);
                $header[]   = $matiere->getName();
            }
            
        }else{

            $header         = array(t('NUM_MAT') ,t('NOM') ,t('PRENOM') ,t('SEXE') ,t('DATE DE NAISSANCE') ,t('NOTE/20'));
        }
        $classe             = new ClasseTaxonomyTermWrapper($eleve_class);
        $excel_name         = t('Liste_eleves_'.$classe->getName().'_'.date('d_M_Y'));
        $key_not_to_excel   = array('ID','TAOMPIANARANA_TID','SEXE_TID','NIVEAU_TID','TAOMPIANARANA_NAME','CLASS_TID','NIVEAU_NAME','CLASS_NAME','NUM_CLASS','TABLE_ID');
        $rows               = _eleve_list_get_list($niveau_tid = NULL, $eleve_class);

        $form_state['excel']= _export_list_eleve_to_excel_rows($excel_name ,$header ,$rows,$key_not_to_excel);

    }
    
    $form_state['rebuild'] = 1;
}

/**
 *  Manomboka eto no manao import note
 */
function import_note_from_xlsx() {
    
    $form   = drupal_get_form('import_note_from_xlsx_form');
    $output = drupal_render($form);

    return $output;
}


/**
 * The form
 * @return multitype:string multitype:string  multitype:string NULL
 */
function import_note_from_xlsx_form($form, &$form_state) {
    
    global $user;
    $form['#attributes'] = array(
        'enctype' => 'multipart/form-data'
    );

    $form['import'] = array(
        '#type' => 'fieldset',
        '#title' => t('Importer les notes des élèves via un fichier excel (xlsx)'),
    );
    
    $options_classe = array();
    $option_matiere = array();
    
    $conditions = array(
        array(
            'field_name' => 'taompianarana_tid',
            'operator' => '=',
            'value' => variable_get('TAOMPIANARANA'),
        ),
        array(
            'field_name' => 'prof_uid',
            'operator' => '=',
            'value' => $user->uid,
        ),
    );
    if (_selectFromClassMatieres($conditions) != NULL) {

        $rows = array();

        $result = _selectFromClassMatieres($conditions);
        while ($record = $result->fetchAssoc()) {

            $class = new ClasseTaxonomyTermWrapper($record['classe_tid']);
            $matiere = new MatieresTaxonomyTermWrapper($record['matiere_tid']);

            $options_classe[$record['classe_tid']]  = $class->getName();
            $option_matiere[$record['matiere_tid']] = $matiere->getName();
        }
    }
    
    $form['import']['classe'] = array(
        '#type' => 'select',
        '#title' => t('Classe'),
        '#options' => $options_classe,
        '#required' => TRUE,
    );
//    
//    $form['import']['matiere'] = array(
//        '#type' => 'select',
//        '#title' => t('Matière'),
//        '#options' => $option_matiere,
//        '#required' => TRUE,
//    );
//    
    $option = _get_taxonomy_term('type_de_note');
    unset($option[variable_get('NOTE_SUR_20')]);
    unset($option[variable_get('NOTE_DEFINITIF')]);
    $form['import']['type_note_tid'] = array(
        '#type' => 'select',
        '#title' => t('Type de note à importer'),
        '#options' => $option,
        '#required' => TRUE,
    );
    
    $form['import']['xlsxfile'] = array(
        '#title' => t('Fichier excel'),
        '#type' => 'file',
        '#description' => ($max_size = parse_size(ini_get('upload_max_filesize'))) ? t('Due to server restrictions, the <strong>maximum upload file size is !max_size</strong>. Files that exceed this size will be disregarded.', array('!max_size' => format_size($max_size))) : '',
    );

    $form['import']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Importer ce fichier'),
    );

    $form['#validate'] = array(
        'import_note_from_xlsx_validate_fileupload',
        'import_note_from_xlsx_form_validate',
    );
    
    return $form;
}

function import_note_from_xlsx_validate_fileupload($form, &$form_state) {

    $validators = array(
        'file_validate_extensions' => array('xlsx'),
    );

    if ($file = file_save_upload('xlsxfile', $validators, "public://", FILE_EXISTS_REPLACE)) {
        $form_state['values']['xlsxfile'] = $file->destination;
    } else {
        form_set_error('xlsxImporter', t('Unable to copy upload file'));
    }
}

function import_note_from_xlsx_form_validate(&$form, &$form_state) {

    if (isset($form_state['values']['xlsxfile']) && $form_state['values']['xlsxfile'] != NULL && $form_state['values']['classe'] != NULL) {

        module_load_include('class.php', 'import_export', 'includes/simplexlsx');

        $xlsx = new SimpleXLSX( $form_state['values']['xlsxfile'] );

        $conditions = array(
            array(
                'field_name' => 'taompianarana_tid',
                'operator' => '=',
                'value' => variable_get('TAOMPIANARANA'),
            ),
            array(
                'field_name' => 'classe_tid',
                'operator' => '=',
                'value' => $form_state['values']['classe'],
            ),
        );

        $result_matiere = _selectFromClassMatieres($conditions);
        $matieres       = array();
        while ($record_matiere = $result_matiere->fetchAssoc()) {

            $matiere      = new MatieresTaxonomyTermWrapper($record_matiere['matiere_tid']);
            $matieres[]   = $matiere->getName();
        }
        
        $countLine = 5 + count($matieres);
        
        foreach( $xlsx->rowsEleve() as $line ) {
            
            if (count($line) != $countLine) {
                
                form_set_error('xlsxfile', t('This file has the incorrect number of columns. Expecting 6'));
            }
            $j = 0;
            for($i = 5; $i < $countLine; $i++){
                
                if($line[$i] != $matieres[$j++]){
                    
                    form_set_error('xlsxfile', t('Erreur du template'));
                    break;
                }
            }
            
            break;
        }
    }
}

function import_note_from_xlsx_form_submit($form, &$form_state) {

//    $matiere        = $form_state['values']['matiere'];
    $classe         = $form_state['values']['classe'];
    $type_note_tid  = $form_state['values']['type_note_tid'];
    $batch   = array(
        'title' => t('Importing CSV ...'),
        'operations' => array(),
        'init_message' => t('Commencing'),
        'progress_message' => t('Processed @current out of @total.'),
        'error_message' => t('An error occurred during processing'),
        'finished' => 'bathc_finish',
    );

    if (isset($form_state['values']['xlsxfile']) && $form_state['values']['xlsxfile'] != NULL) {

        $filename = $form_state['values']['xlsxfile'];

        module_load_include('class.php', 'import_export', 'includes/simplexlsx');

        $xlsx = new SimpleXLSX( $filename );

        $i = 1;
        foreach( $xlsx->rowsEleve() as $line ) {

            if($i==1){
                $i++;
                continue;
            }
            //$line[]                = $matiere;
            $line[]                = $classe;
            $line[]                = $type_note_tid;
            $batch['operations'][] = array('import_note_from_xlsx_import_line', array($line));
        }
        
        $batch['operations'][] = array('import_export_unlink_file', array($filename));

    }

    batch_set($batch);
}


function import_note_from_xlsx_import_line($line , &$context = NULL) {

    global $user;
    $num_mat        = trim($line[0]);
    $nom            = trim($line[1]);
    $prenom         = trim($line[2]);
    $sex            = trim($line[3]);
    $date_naiss     = trim($line[4]);
    $classe         = trim($line[count($line) - 2]);
    $type_note_tid  = trim($line[count($line) - 1]);

    $notes = array();
    
    for($i = 5;$i < count($line) - 2; $i++){
        
        $notes[] = trim($line[$i]);
    }
    
    $conditions = array(
        array(
            'field_name' => 'taompianarana_tid',
            'operator' => '=',
            'value' => variable_get('TAOMPIANARANA'),
        ),
        array(
            'field_name' => 'classe_tid',
            'operator' => '=',
            'value' => $classe,
        ),
    );

    $result_matiere = _selectFromClassMatieres($conditions);
    $matieres       = array();
    $j              = 0;
    
    while ($record_matiere = $result_matiere->fetchAssoc()) {

        $matiereTerm       = new MatieresTaxonomyTermWrapper($record_matiere['matiere_tid']);
        
        $matiere           = $matiereTerm->getTid();
        $note              = $notes[$j++];

        try{
            module_load_include('php', 'wrappers_custom', 'includes/taxonomy_term/SexeTaxonomyTermWrapper');
            module_load_include('inc', 'entity_entity', 'includes/relation/eleveNote');
            $sex_tid     = SexeTaxonomyTermWrapper::getClasseByName($sex);
            $lookUpEleve = EleveEleveWrapper::lookUpEleve($nom, $prenom, $sex_tid, $date_naiss);
            $eleve       = EleveEleveWrapper::getByNumMat($num_mat);

            if( ! is_numeric($note) || $note > 20){

                drupal_set_message('Note invalide. NUM_MAT : '.$num_mat, 'error');
                return;
            }

            if($lookUpEleve != NULL && $eleve != NULL && $lookUpEleve == $eleve->getId()){

                $taompianarana_tid = variable_get('TAOMPIANARANA');
                $periode_tid       = variable_get('PERIODE');

                // tadiavina ao anaty eleveTaompianarana aloha ilay eleve
                $conditions = array(
                    array(
                        'field_name' => 'taompianarana_tid',
                        'operator' => '=',
                        'value' => $taompianarana_tid,
                    ),
                    array(
                        'field_name' => 'eleve_id',
                        'operator' => '=',
                        'value' => $eleve->getId(),
                    ),
                    array(
                        'field_name' => 'class_tid',
                        'operator' => '=',
                        'value' => $classe,
                    ),
                );

                $find = _selectFromEleveTaompianarana($conditions);

                if($find->rowCount() == 1){

                    $conditions_note = array(
                        array(
                            'field_name' => 'taompianarana_tid',
                            'operator' => '=',
                            'value' => $taompianarana_tid,
                        ),
                        array(
                            'field_name' => 'classe_tid',
                            'operator' => '=',
                            'value' => $classe,
                        ),
                        array(
                            'field_name' => 'matiere_tid',
                            'operator' => '=',
                            'value' => $matiere,
                        ),
                        array(
                            'field_name' => 'eleve_tid',
                            'operator' => '=',
                            'value' => $eleve->getId(),
                        ),
                        array(
                            'field_name' => 'type_note_tid',
                            'operator' => '=',
                            'value' => $type_note_tid,
                        ),
                    );
                    // tadiavina aloha ilay note sao dia efa misy ato amin'ny base
                    $findResult = _selectFromEleveNote($conditions_note);
                    if($findResult != NULL && $findResult->rowCount() > 0){

                        drupal_set_message(t('L\'élève Num mat : '.$num_mat.' déjà eu ce note'), 'error');
                        return;
                    }

                    $saved = _insertIntoEleveNote($taompianarana_tid, $classe, $matiere, $eleve->getId(), $type_note_tid, $periode_tid, $note, $user->uid);

                    if($saved == NULL || $saved == 0){

                        drupal_set_message(t('Enregistrement echoé. Num mat : '.$num_mat), 'error');
                    }else {
                        // rehefa tafiditra ilay note de atao avy hatrany ny calcule ny note generale

                        $mode_calcul   = variable_get('OPERATION_'. variable_get('PERIODE'));
                        $note_generale = _note_calcul_note_sur_vingt($eleve->getId(), $mode_calcul, $classe, $matiere);
                        _insertIntoEleveNote($taompianarana_tid, $classe, $matiere, $eleve->getId(), variable_get('NOTE_SUR_20'), $periode_tid, $note_generale, $user->uid);
                    }

                }else {

                    drupal_set_message('Elève non trouvable dans la classe que vous avez sélectionée. NUM_MAT : '.$num_mat, 'error');
                }


            }else{

                drupal_set_message('Erreur de correspondance de NUM Matricule et les informations concernant l\'élève. NUM_MAT : '.$num_mat, 'error');
            }

        }catch (Exception $e){
            $db_transaction->rollback();
            drupal_set_message(t('Enregistrement echoé. Num mat : '.$num_mat), 'error');
        }
    }
}



/**
 * 
 */
function _export_to_pdf($url,$filename,$fileurl,$papier = "A4",$orientation='Portrait') {
    
    if($url != NULL && $filename != NULL && $fileurl != NULL){

        global $base_url;
        $url            = $base_url.'/'.$url;
        $session_name   = session_name();
        $session_id     = session_id();
        $path           = drupal_realpath(drupal_get_path('module', 'import_export') .'/includes/wkhtmltopdf');
        $filename       = $filename . '.pdf';
        $fileurl       .= '/' . $filename;
        
        // fafana aloha raha efa misy 
        if(file_exists($fileurl)){
            
            unlink($fileurl);
        }
        $destinationpath= file_stream_wrapper_get_instance_by_uri($fileurl)->realpath();
        //$options      = ' --page-size A4 -L 0 -R 0 --disable-smart-shrinking --print-media-type -O '.$orientation ;
        $options        = ' --page-size '.$papier.' -L 0 -R 0  --print-media-type -O '.$orientation ;
        $options       .= ' --cookie ' . $session_name . ' ' . $session_id ;
        $options       .= ' --dpi 150 --encoding utf-8 ';
        $cmd            = $path . $options . ' "' .  $url . '" "' . $destinationpath . '"';
        exec($cmd);
    }
    
    if(is_file($fileurl)){
        
        return $fileurl;
    }else{
        
        return NULL;
    }
  
}
